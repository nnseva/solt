/// SPDX-License-Identifier: LGPL3
pragma solidity >= 0.5 < 0.9;
pragma experimental ABIEncoderV2;

<%- include('solt/std.solt') -%>
// define the indirect index of bytes
<% KEYCOMPARE =
    ' for(uint i=0; i < key1.length && i < key2.length; i++) {' +
    '   if(key1[i] == key2[i]) {' +
    '       continue;' +
    '   } else if(key1[i] < key2[i]) {' +
    '       return true;' +
    '   } else {' +
    '       return false;' +
    '   }' +
    ' }' +
    ' return key1.length < key2.length;'
-%>
<%- include_with('solt/index_indirect.solt', {
    INDIRECT_LIBRARY: 'bytes_indirect',
    INDIRECT_KEYTYPE: 'bytes',
    INDIRECT_KEYCOMPARE: KEYCOMPARE
}) -%>
contract SimpleIndirectTest {
    using bytes_indirect for bytes_indirect.Index;
    bytes_indirect.Index private bytesindex;

    function compare_bytes(bytes memory key1, bytes memory key2) internal pure returns(bool) {
        <%- KEYCOMPARE -%>
    }

    function test_add() public {
        bytesindex.add(bytes("1"));
        bytesindex.add(bytes("5"));
        bytesindex.add(bytes("18"));
        bytesindex.add(bytes("323334"));
        bytesindex.add(bytes("11"));
        bytesindex.add(bytes("0"));
        bytesindex.add(bytes("1"));
        bytesindex.add(bytes("18"));
        bytesindex.add(bytes("323334"));
        uint size=0;
        bytes[6] memory expected = [
            bytes("0"),
            bytes("1"),
            bytes("11"),
            bytes("18"),
            bytes("323334"),
            bytes("5")
        ];
        for(uint i=bytesindex.first_id(); i != 0; i=bytesindex.next_id(i)) {
            bytes memory key = bytesindex.get_key(i);
            uint id = bytesindex.get_id(key);
            require(i == id);
            require(bytesindex.contains_id(i));
            require(bytesindex.contains(key));
            require(!compare_bytes(key, expected[size]));
            size += 1;
        }
        require(
            size == 6,
            "Wrong size"
        );
        for(uint i=0; i < expected.length; i++) {
            require(
                bytesindex.contains(expected[i]),
                "Contains expected failed"
            );
        }
        bytes[4] memory unexpected = [
            bytes("2"),
            bytes("4"),
            bytes("44"),
            bytes("181")
        ];
        for(uint i=0; i < unexpected.length; i++) {
            require(
                !bytesindex.contains(unexpected[i]),
                "Contains unexpected failed"
            );
        }
    }

    function test_add_remove_add() public {
        bytesindex.add(bytes("1"));
        bytesindex.add(bytes("5"));
        bytesindex.add(bytes("18"));
        bytesindex.add(bytes("323334"));
        bytesindex.add(bytes("11"));
        bytesindex.add(bytes("0"));
        bytesindex.remove(bytes("5"));
        bytesindex.remove(bytes("18"));
        bytesindex.add(bytes("12"));
        uint size=0;
        bytes[5] memory expected = [
            bytes("0"),
            bytes("1"),
            bytes("11"),
            bytes("12"),
            bytes("323334")
        ];
        for(uint i=bytesindex.first_id(); i != 0; i=bytesindex.next_id(i)) {
            bytes memory key = bytesindex.get_key(i);
            uint id = bytesindex.get_id(key);
            require(i == id);
            require(bytesindex.contains_id(i));
            require(bytesindex.contains(key));
            require(!compare_bytes(key, expected[size]));
            size += 1;
        }
        require(
            size == 5,
            "Wrong size"
        );
        for(uint i=0; i < expected.length; i++) {
            require(
                bytesindex.contains(expected[i]),
                "Contains expected failed"
            );
        }
        bytes[4] memory unexpected = [
            bytes("5"),
            bytes("18"),
            bytes("44"),
            bytes("181")
        ];
        for(uint i=0; i < unexpected.length; i++) {
            require(
                !bytesindex.contains(unexpected[i]),
                "Contains unexpected failed"
            );
        }
    }
    function values() public view returns(bytes[] memory) {
        uint size = 0;
        for(uint i = bytesindex.first_id(); i != 0; i = bytesindex.next_id(i)) {
            size += 1;
        }
        bytes[] memory _values = new bytes[](size);
        size = 0;
        for(uint i = bytesindex.first_id(); i != 0; i = bytesindex.next_id(i)) {
            _values[size] = bytesindex.get_key(i);
            size += 1;
        }
        return _values;
    }
}
