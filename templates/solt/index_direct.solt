// ----------------------------------------------------------------------------
// Solidity Templates Direct Index library
//
// Copyright (c) 2025 nnseva LGPL 3.0
//
// Initial version has been based on
// BokkyPooBah's Red-Black Tree Library
// Copyright (c) BokkyPooBah / Bok Consulting Pty Ltd 2020. The MIT Licence.
// https://github.com/bokkypoobah/BokkyPooBahsRedBlackTreeLibrary
// ----------------------------------------------------------------------------
library <%- DIRECT_LIBRARY -%> {
    struct Node {
        <%- DIRECT_KEYTYPE -%> parent;
        <%- DIRECT_KEYTYPE -%> left;
        <%- DIRECT_KEYTYPE -%> right;
        bool red;
    }

    struct Index {
        <%- DIRECT_KEYTYPE -%> root;
        mapping(<%- DIRECT_KEYTYPE -%> => Node) nodes;
    }

    <%- DIRECT_KEYTYPE -%> private constant EMPTY = 0;

    function first(Index storage self) internal view returns (<%- DIRECT_KEYTYPE -%> _key) {
        _key = self.root;
        if (_key != EMPTY) {
            while (self.nodes[_key].left != EMPTY) {
                _key = self.nodes[_key].left;
            }
        }
    }
    function last(Index storage self) internal view returns (<%- DIRECT_KEYTYPE -%> _key) {
        _key = self.root;
        if (_key != EMPTY) {
            while (self.nodes[_key].right != EMPTY) {
                _key = self.nodes[_key].right;
            }
        }
    }
    function next(Index storage self, <%- DIRECT_KEYTYPE -%> target) internal view returns (<%- DIRECT_KEYTYPE -%> cursor) {
        if(target != EMPTY) {
            if (self.nodes[target].right != EMPTY) {
                cursor = treeMinimum(self, self.nodes[target].right);
            } else {
                cursor = self.nodes[target].parent;
                while (cursor != EMPTY && target == self.nodes[cursor].right) {
                    target = cursor;
                    cursor = self.nodes[cursor].parent;
                }
            }
        }
    }
    function prev(Index storage self, <%- DIRECT_KEYTYPE -%> target) internal view returns (<%- DIRECT_KEYTYPE -%> cursor) {
        if(target != EMPTY) {
            if (self.nodes[target].left != EMPTY) {
                cursor = treeMaximum(self, self.nodes[target].left);
            } else {
                cursor = self.nodes[target].parent;
                while (cursor != EMPTY && target == self.nodes[cursor].left) {
                    target = cursor;
                    cursor = self.nodes[cursor].parent;
                }
            }
        }
    }
    function contains(Index storage self, <%- DIRECT_KEYTYPE -%> key) internal view returns (bool) {
        return (key != EMPTY) && ((key == self.root) || (self.nodes[key].parent != EMPTY));
    }
    function add(Index storage self, <%- DIRECT_KEYTYPE -%> key) internal returns (bool) {
        if(key == EMPTY)
            return false;
        if(contains(self, key))
            return false;
        <%- DIRECT_KEYTYPE -%> cursor = EMPTY;
        <%- DIRECT_KEYTYPE -%> probe = self.root;
        while (probe != EMPTY) {
            cursor = probe;
            if (key < probe) {
                probe = self.nodes[probe].left;
            } else {
                probe = self.nodes[probe].right;
            }
        }
        self.nodes[key] = Node({parent: cursor, left: EMPTY, right: EMPTY, red: true});
        if (cursor == EMPTY) {
            self.root = key;
        } else if (key < cursor) {
            self.nodes[cursor].left = key;
        } else {
            self.nodes[cursor].right = key;
        }
        insertFixup(self, key);
        return true;
    }
    function remove(Index storage self, <%- DIRECT_KEYTYPE -%> key) internal returns (bool) {
        if(key == EMPTY)
            return false;
        if(!contains(self, key))
            return false;
        <%- DIRECT_KEYTYPE -%> probe;
        <%- DIRECT_KEYTYPE -%> cursor;
        if (self.nodes[key].left == EMPTY || self.nodes[key].right == EMPTY) {
            cursor = key;
        } else {
            cursor = self.nodes[key].right;
            while (self.nodes[cursor].left != EMPTY) {
                cursor = self.nodes[cursor].left;
            }
        }
        if (self.nodes[cursor].left != EMPTY) {
            probe = self.nodes[cursor].left;
        } else {
            probe = self.nodes[cursor].right;
        }
        <%- DIRECT_KEYTYPE -%> yParent = self.nodes[cursor].parent;
        self.nodes[probe].parent = yParent;
        if (yParent != EMPTY) {
            if (cursor == self.nodes[yParent].left) {
                self.nodes[yParent].left = probe;
            } else {
                self.nodes[yParent].right = probe;
            }
        } else {
            self.root = probe;
        }
        bool doFixup = !self.nodes[cursor].red;
        if (cursor != key) {
            replaceParent(self, cursor, key);
            self.nodes[cursor].left = self.nodes[key].left;
            self.nodes[self.nodes[cursor].left].parent = cursor;
            self.nodes[cursor].right = self.nodes[key].right;
            self.nodes[self.nodes[cursor].right].parent = cursor;
            self.nodes[cursor].red = self.nodes[key].red;
            (cursor, key) = (key, cursor);
        }
        if (doFixup) {
            removeFixup(self, probe);
        }
        delete self.nodes[cursor];
        return true;
    }

    function treeMinimum(Index storage self, <%- DIRECT_KEYTYPE -%> key) private view returns (<%- DIRECT_KEYTYPE -%>) {
        while (self.nodes[key].left != EMPTY) {
            key = self.nodes[key].left;
        }
        return key;
    }
    function treeMaximum(Index storage self, <%- DIRECT_KEYTYPE -%> key) private view returns (<%- DIRECT_KEYTYPE -%>) {
        while (self.nodes[key].right != EMPTY) {
            key = self.nodes[key].right;
        }
        return key;
    }

    function rotateLeft(Index storage self, <%- DIRECT_KEYTYPE -%> key) private {
        <%- DIRECT_KEYTYPE -%> cursor = self.nodes[key].right;
        <%- DIRECT_KEYTYPE -%> keyParent = self.nodes[key].parent;
        <%- DIRECT_KEYTYPE -%> cursorLeft = self.nodes[cursor].left;
        self.nodes[key].right = cursorLeft;
        if (cursorLeft != EMPTY) {
            self.nodes[cursorLeft].parent = key;
        }
        self.nodes[cursor].parent = keyParent;
        if (keyParent == EMPTY) {
            self.root = cursor;
        } else if (key == self.nodes[keyParent].left) {
            self.nodes[keyParent].left = cursor;
        } else {
            self.nodes[keyParent].right = cursor;
        }
        self.nodes[cursor].left = key;
        self.nodes[key].parent = cursor;
    }
    function rotateRight(Index storage self, <%- DIRECT_KEYTYPE -%> key) private {
        <%- DIRECT_KEYTYPE -%> cursor = self.nodes[key].left;
        <%- DIRECT_KEYTYPE -%> keyParent = self.nodes[key].parent;
        <%- DIRECT_KEYTYPE -%> cursorRight = self.nodes[cursor].right;
        self.nodes[key].left = cursorRight;
        if (cursorRight != EMPTY) {
            self.nodes[cursorRight].parent = key;
        }
        self.nodes[cursor].parent = keyParent;
        if (keyParent == EMPTY) {
            self.root = cursor;
        } else if (key == self.nodes[keyParent].right) {
            self.nodes[keyParent].right = cursor;
        } else {
            self.nodes[keyParent].left = cursor;
        }
        self.nodes[cursor].right = key;
        self.nodes[key].parent = cursor;
    }

    function insertFixup(Index storage self, <%- DIRECT_KEYTYPE -%> key) private {
        <%- DIRECT_KEYTYPE -%> cursor;
        while (key != self.root && self.nodes[self.nodes[key].parent].red) {
            <%- DIRECT_KEYTYPE -%> keyParent = self.nodes[key].parent;
            if (keyParent == self.nodes[self.nodes[keyParent].parent].left) {
                cursor = self.nodes[self.nodes[keyParent].parent].right;
                if (self.nodes[cursor].red) {
                    self.nodes[keyParent].red = false;
                    self.nodes[cursor].red = false;
                    self.nodes[self.nodes[keyParent].parent].red = true;
                    key = self.nodes[keyParent].parent;
                } else {
                    if (key == self.nodes[keyParent].right) {
                      key = keyParent;
                      rotateLeft(self, key);
                    }
                    keyParent = self.nodes[key].parent;
                    self.nodes[keyParent].red = false;
                    self.nodes[self.nodes[keyParent].parent].red = true;
                    rotateRight(self, self.nodes[keyParent].parent);
                }
            } else {
                cursor = self.nodes[self.nodes[keyParent].parent].left;
                if (self.nodes[cursor].red) {
                    self.nodes[keyParent].red = false;
                    self.nodes[cursor].red = false;
                    self.nodes[self.nodes[keyParent].parent].red = true;
                    key = self.nodes[keyParent].parent;
                } else {
                    if (key == self.nodes[keyParent].left) {
                      key = keyParent;
                      rotateRight(self, key);
                    }
                    keyParent = self.nodes[key].parent;
                    self.nodes[keyParent].red = false;
                    self.nodes[self.nodes[keyParent].parent].red = true;
                    rotateLeft(self, self.nodes[keyParent].parent);
                }
            }
        }
        self.nodes[self.root].red = false;
    }

    function replaceParent(Index storage self, <%- DIRECT_KEYTYPE -%> a, <%- DIRECT_KEYTYPE -%> b) private {
        <%- DIRECT_KEYTYPE -%> bParent = self.nodes[b].parent;
        self.nodes[a].parent = bParent;
        if (bParent == EMPTY) {
            self.root = a;
        } else {
            if (b == self.nodes[bParent].left) {
                self.nodes[bParent].left = a;
            } else {
                self.nodes[bParent].right = a;
            }
        }
    }
    function removeFixup(Index storage self, <%- DIRECT_KEYTYPE -%> key) private {
        <%- DIRECT_KEYTYPE -%> cursor;
        while (key != self.root && !self.nodes[key].red) {
            <%- DIRECT_KEYTYPE -%> keyParent = self.nodes[key].parent;
            if (key == self.nodes[keyParent].left) {
                cursor = self.nodes[keyParent].right;
                if (self.nodes[cursor].red) {
                    self.nodes[cursor].red = false;
                    self.nodes[keyParent].red = true;
                    rotateLeft(self, keyParent);
                    cursor = self.nodes[keyParent].right;
                }
                if (!self.nodes[self.nodes[cursor].left].red && !self.nodes[self.nodes[cursor].right].red) {
                    self.nodes[cursor].red = true;
                    key = keyParent;
                } else {
                    if (!self.nodes[self.nodes[cursor].right].red) {
                        self.nodes[self.nodes[cursor].left].red = false;
                        self.nodes[cursor].red = true;
                        rotateRight(self, cursor);
                        cursor = self.nodes[keyParent].right;
                    }
                    self.nodes[cursor].red = self.nodes[keyParent].red;
                    self.nodes[keyParent].red = false;
                    self.nodes[self.nodes[cursor].right].red = false;
                    rotateLeft(self, keyParent);
                    key = self.root;
                }
            } else {
                cursor = self.nodes[keyParent].left;
                if (self.nodes[cursor].red) {
                    self.nodes[cursor].red = false;
                    self.nodes[keyParent].red = true;
                    rotateRight(self, keyParent);
                    cursor = self.nodes[keyParent].left;
                }
                if (!self.nodes[self.nodes[cursor].right].red && !self.nodes[self.nodes[cursor].left].red) {
                    self.nodes[cursor].red = true;
                    key = keyParent;
                } else {
                    if (!self.nodes[self.nodes[cursor].left].red) {
                        self.nodes[self.nodes[cursor].right].red = false;
                        self.nodes[cursor].red = true;
                        rotateLeft(self, cursor);
                        cursor = self.nodes[keyParent].left;
                    }
                    self.nodes[cursor].red = self.nodes[keyParent].red;
                    self.nodes[keyParent].red = false;
                    self.nodes[self.nodes[cursor].left].red = false;
                    rotateRight(self, keyParent);
                    key = self.root;
                }
            }
        }
        self.nodes[key].red = false;
    }
}
